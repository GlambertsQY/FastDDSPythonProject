# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _FastDDSJsonStrWrapper
else:
    import _FastDDSJsonStrWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FastDDSJsonStrWrapper.delete_SwigPyIterator

    def value(self):
        return _FastDDSJsonStrWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _FastDDSJsonStrWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _FastDDSJsonStrWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _FastDDSJsonStrWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _FastDDSJsonStrWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _FastDDSJsonStrWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _FastDDSJsonStrWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _FastDDSJsonStrWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _FastDDSJsonStrWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _FastDDSJsonStrWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _FastDDSJsonStrWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _FastDDSJsonStrWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _FastDDSJsonStrWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _FastDDSJsonStrWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _FastDDSJsonStrWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _FastDDSJsonStrWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _FastDDSJsonStrWrapper:
_FastDDSJsonStrWrapper.SwigPyIterator_swigregister(SwigPyIterator)
import fastdds
class _JsonStrBeanSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FastDDSJsonStrWrapper.delete__JsonStrBeanSeq

# Register _JsonStrBeanSeq in _FastDDSJsonStrWrapper:
_FastDDSJsonStrWrapper._JsonStrBeanSeq_swigregister(_JsonStrBeanSeq)
class JsonStrBeanSeq(_JsonStrBeanSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _FastDDSJsonStrWrapper.delete_JsonStrBeanSeq

    def __init__(self, *args):
        _FastDDSJsonStrWrapper.JsonStrBeanSeq_swiginit(self, _FastDDSJsonStrWrapper.new_JsonStrBeanSeq(*args))

    def __len__(self):
        return _FastDDSJsonStrWrapper.JsonStrBeanSeq___len__(self)

    def __getitem__(self, i):
        return _FastDDSJsonStrWrapper.JsonStrBeanSeq___getitem__(self, i)

# Register JsonStrBeanSeq in _FastDDSJsonStrWrapper:
_FastDDSJsonStrWrapper.JsonStrBeanSeq_swigregister(JsonStrBeanSeq)
class JsonStrBean(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _FastDDSJsonStrWrapper.delete_JsonStrBean

    def __init__(self, *args):
        _FastDDSJsonStrWrapper.JsonStrBean_swiginit(self, _FastDDSJsonStrWrapper.new_JsonStrBean(*args))

    def __eq__(self, x):
        return _FastDDSJsonStrWrapper.JsonStrBean___eq__(self, x)

    def __ne__(self, x):
        return _FastDDSJsonStrWrapper.JsonStrBean___ne__(self, x)

    def JsonString(self, *args):
        return _FastDDSJsonStrWrapper.JsonStrBean_JsonString(self, *args)

    @staticmethod
    def getMaxCdrSerializedSize(current_alignment=0):
        return _FastDDSJsonStrWrapper.JsonStrBean_getMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def getCdrSerializedSize(data, current_alignment=0):
        return _FastDDSJsonStrWrapper.JsonStrBean_getCdrSerializedSize(data, current_alignment)

    def serialize(self, cdr):
        return _FastDDSJsonStrWrapper.JsonStrBean_serialize(self, cdr)

    def deserialize(self, cdr):
        return _FastDDSJsonStrWrapper.JsonStrBean_deserialize(self, cdr)

    @staticmethod
    def getKeyMaxCdrSerializedSize(current_alignment=0):
        return _FastDDSJsonStrWrapper.JsonStrBean_getKeyMaxCdrSerializedSize(current_alignment)

    @staticmethod
    def isKeyDefined():
        return _FastDDSJsonStrWrapper.JsonStrBean_isKeyDefined()

    def serializeKey(self, cdr):
        return _FastDDSJsonStrWrapper.JsonStrBean_serializeKey(self, cdr)

# Register JsonStrBean in _FastDDSJsonStrWrapper:
_FastDDSJsonStrWrapper.JsonStrBean_swigregister(JsonStrBean)
GEN_API_VER = _FastDDSJsonStrWrapper.GEN_API_VER
class JsonStrBeanPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _FastDDSJsonStrWrapper.JsonStrBeanPubSubType_swiginit(self, _FastDDSJsonStrWrapper.new_JsonStrBeanPubSubType())
    __swig_destroy__ = _FastDDSJsonStrWrapper.delete_JsonStrBeanPubSubType

    def serialize(self, data, payload):
        return _FastDDSJsonStrWrapper.JsonStrBeanPubSubType_serialize(self, data, payload)

    def deserialize(self, payload, data):
        return _FastDDSJsonStrWrapper.JsonStrBeanPubSubType_deserialize(self, payload, data)

    def getSerializedSizeProvider(self, data):
        return _FastDDSJsonStrWrapper.JsonStrBeanPubSubType_getSerializedSizeProvider(self, data)

    def getKey(self, data, ihandle, force_md5=False):
        return _FastDDSJsonStrWrapper.JsonStrBeanPubSubType_getKey(self, data, ihandle, force_md5)

    def createData(self):
        return _FastDDSJsonStrWrapper.JsonStrBeanPubSubType_createData(self)

    def deleteData(self, data):
        return _FastDDSJsonStrWrapper.JsonStrBeanPubSubType_deleteData(self, data)

    def is_bounded(self):
        return _FastDDSJsonStrWrapper.JsonStrBeanPubSubType_is_bounded(self)

    def is_plain(self):
        return _FastDDSJsonStrWrapper.JsonStrBeanPubSubType_is_plain(self)

    def construct_sample(self, memory):
        return _FastDDSJsonStrWrapper.JsonStrBeanPubSubType_construct_sample(self, memory)
    m_md5 = property(_FastDDSJsonStrWrapper.JsonStrBeanPubSubType_m_md5_get, _FastDDSJsonStrWrapper.JsonStrBeanPubSubType_m_md5_set)
    m_keyBuffer = property(_FastDDSJsonStrWrapper.JsonStrBeanPubSubType_m_keyBuffer_get, _FastDDSJsonStrWrapper.JsonStrBeanPubSubType_m_keyBuffer_set)

# Register JsonStrBeanPubSubType in _FastDDSJsonStrWrapper:
_FastDDSJsonStrWrapper.JsonStrBeanPubSubType_swigregister(JsonStrBeanPubSubType)

